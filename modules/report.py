# Create a Streamlit-safe version of report.py using relative paths
from pathlib import Path

safe_report_code = '''"""
report.py â€“ Report generation module for SKC Log Reader

Generates structured, readable reports in text or PDF format
based on parsed log analysis, anomaly detection, test plan results,
and recommendation engine output.
"""

import os
from pathlib import Path
from fpdf import FPDF
from typing import Dict, List, Optional


class LogReportPDF(FPDF):
    def header(self):
        self.set_font("Arial", "B", 14)
        self.cell(0, 10, "SKC Log RCA Report", ln=True, align="C")
        self.set_font("Arial", "", 10)
        self.cell(0, 8, "Generated by SKC Log Reader", ln=True, align="C")
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font("Arial", "I", 8)
        self.cell(0, 10, f"Page {self.page_no()}", align="C")


def generate_text_report(summary: Dict, recommendations: List[str], test_results: Optional[List[Dict]] = None, metadata: Optional[Dict] = None, output_path: Path = Path("data/report.txt")):
    """
    Generate a plain text report with summary and recommendations.
    """
    output_path.parent.mkdir(parents=True, exist_ok=True)
    with open(output_path, "w", encoding="utf-8") as f:
        f.write("==== SKC LOG RCA SUMMARY ====\n\n")
        if metadata:
            f.write(f"Project: {metadata.get('project_name', 'N/A')}\n")
            f.write(f"App: {metadata.get('app_name', 'N/A')} | Build: {metadata.get('build_version', 'N/A')} | Test: {metadata.get('test_type', 'N/A')}\n\n")
        f.write(f"Total Events: {summary.get('total_events', 0)}\n\n")

        f.write("== Categories ==\n")
        for category, count in summary.get("categories", {}).items():
            f.write(f" - {category}: {count}\n")

        f.write("\n== Anomalies ==\n")
        for anomaly in summary.get("anomalies", []):
            f.write(f" - {anomaly}\n")

        f.write("\n== Recommendations ==\n")
        for line in recommendations:
            f.write(f" - {line}\n")

        if test_results:
            f.write("\n== Test Plan Results ==\n")
            for step in test_results:
                f.write(f"Step {step['step_id']} - {step['description']} - Status: {step['status']}\n")


def generate_pdf_report(summary: Dict, recommendations: List[str], test_results: Optional[List[Dict]] = None, metadata: Optional[Dict] = None, output_path: Path = Path("data/report.pdf")):
    """
    Generate a simple structured PDF report using fpdf
    """
    output_path.parent.mkdir(parents=True, exist_ok=True)
    pdf = LogReportPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    if metadata:
        pdf.set_font("Arial", "B", 12)
        pdf.cell(0, 10, "Project Information", ln=True)
        pdf.set_font("Arial", "", 11)
        pdf.cell(0, 8, f"Project: {metadata.get('project_name', 'N/A')}", ln=True)
        pdf.cell(0, 8, f"App: {metadata.get('app_name', 'N/A')}", ln=True)
        pdf.cell(0, 8, f"Build: {metadata.get('build_version', 'N/A')} | Test Type: {metadata.get('test_type', 'N/A')}", ln=True)
        pdf.ln(5)

    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Summary", ln=True)
    pdf.set_font("Arial", "", 11)
    pdf.cell(0, 8, f"Total Events: {summary.get('total_events', 0)}", ln=True)

    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Categories", ln=True)
    pdf.set_font("Arial", "", 11)
    for category, count in summary.get("categories", {}).items():
        pdf.cell(0, 8, f"- {category}: {count}", ln=True)

    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Anomalies", ln=True)
    pdf.set_font("Arial", "", 11)
    for anomaly in summary.get("anomalies", []):
        pdf.multi_cell(0, 8, f"- {anomaly}")

    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Recommendations", ln=True)
    pdf.set_font("Arial", "", 11)
    for line in recommendations:
        pdf.multi_cell(0, 8, f"{line}")

    if test_results:
        pdf.set_font("Arial", "B", 12)
        pdf.cell(0, 10, "Test Plan Results", ln=True)
        pdf.set_font("Arial", "", 11)
        for step in test_results:
            pdf.multi_cell(0, 8, f"Step {step['step_id']} - {step['description']} - Status: {step['status']}")

    pdf.output(str(output_path))
'''

# Save the safe version to correct location
modules_dir = Path("/mnt/data/skc_log_reader/modules")
report_file = modules_dir / "report.py"
report_file.write_text(safe_report_code)

report_file.name
